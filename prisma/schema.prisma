// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// A Github issue or PR that needs TAG discussion. May have more detail in a DesignReview record.
model Issue {
  /// The GraphQL Node ID for an issue or PR.
  id     String @id
  org    String
  repo   String
  /// The issue or PR number: https://github.com/{org}/{repo}/issues/{number}
  number Int

  title       String
  /// The initial comment on the issue, in Markdown format.
  body        String
  labels      Label[]
  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id], onDelete: SetNull)
  created     DateTime
  updated     DateTime
  closed      DateTime?

  /// We get an initial set of timeline items when querying the issue, but there may be more pages
  /// of results. This is the `endCursor` value from the first page until we've fetched the
  /// remaining pages.
  pendingCommentsFrom String?

  discussions Discussion[]
  comments    IssueComment[]

  // Subclasses:
  designReview DesignReview?

  @@unique([org, repo, number])
}

/// An issue in https://github.com/w3ctag/design-reviews.
model DesignReview {
  /// The GraphQL Node ID for an issue in https://github.com/w3ctag/design-reviews.
  id    String @id
  issue Issue  @relation(fields: [id], references: [id], onDelete: Cascade)

  /// If there's a mirror of this issue in the private brainstorming repo, this is that issue's
  /// GraphQL node ID.
  privateBrainstormingIssueId             String? @unique
  /// If there's a mirror of this issue in the private brainstorming repo, this is that issue's
  /// number. This facilitates redirecting from /gh/w3ctag/design-reviews-private-brainstorming/##
  /// to the matching review.
  privateBrainstormingIssueNumber         Int?    @unique
  /// We get an initial set of timeline items when querying the mirrored private brainstorming
  /// issue, but there may be more pages of results. This is the `endCursor` value from the first
  /// page until we've fetched the remaining pages.
  pendingPrivateBrainstormingCommentsFrom String?
}

model Label {
  issueId String
  issue   Issue? @relation(fields: [issueId], references: [id], onDelete: Cascade)
  /// This label's global node ID, which lets us track name changes.
  labelId String
  /// The label's name, which can in theory change over time and is determined by the labelId.
  label   String

  @@unique([issueId, labelId])
}

model Milestone {
  id    String    @id
  title String
  dueOn DateTime?
  issue Issue[]
}

/// Represents a GraphQL
/// [IssueComment](https://docs.github.com/en/graphql/reference/objects#issuecomment) on either the
/// main design review or the associated private brainstorming thread.
model IssueComment {
  /// The GraphQL ID of the IssueComment.
  id                     String      @id
  issueId                String
  issue                  Issue       @relation(fields: [issueId], references: [id], onDelete: Cascade)
  publishedAt            DateTime
  updatedAt              DateTime
  url                    String
  /// The contents of the comment, in Markdown format.
  body                   String
  /// Can be undefined if the author's account was deleted.
  authorId               String?
  author                 GithubUser? @relation(fields: [authorId], references: [id], onDelete: SetNull)
  isMinimized            Boolean
  /// Private brainstorming issues should only be shown to logged in TAG members and associates.
  isPrivateBrainstorming Boolean
}

/// Either an in-person multi-day meeting or a week of telecons.
model Meeting {
  year       Int
  /// For example, "07-seattle" or "02-05".
  name       String
  minutesUrl String

  /// The Github node ID for the minutes document. This changes each time a commit updates the minutes.
  minutesId String

  /// The Github node ID for the minutes document whose contents are cached in the `contents` field.
  cachedMinutesId String?
  contents        String?

  sessions    MeetingSession[]
  discussions Discussion[]

  @@unique([year, name])
}

/// Represents a single discussion session within a meeting (or within a week of telecons). This is
/// the level at which attendance is tracked.
model MeetingSession {
  id Int @id @default(autoincrement())

  meetingYear Int
  meetingName String
  meeting     Meeting @relation(fields: [meetingYear, meetingName], references: [year, name], onDelete: Cascade)

  /// E.g. Plenary, "Breakout A", F2F, etc.
  type      String
  attendees MeetingAttendee[]

  @@unique([meetingYear, meetingName, type])
}

model MeetingAttendee {
  sessionId  Int
  session    MeetingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  /// The Github node ID for the TAG member's account there. These are mapped to names in the source
  /// code rather than in this database.
  attendeeId String

  @@unique([sessionId, attendeeId])
}

model Discussion {
  id      Int    @id @default(autoincrement())
  issueId String
  issue   Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  meetingYear Int
  meetingName String
  meeting     Meeting @relation(fields: [meetingYear, meetingName], references: [year, name], onDelete: Cascade)

  /// The text of the discussion.
  markdown         String
  proposedComments ProposedComment[]
}

model ProposedComment {
  id Int @id @default(autoincrement())

  /// A proposed comment might come from a discussion or a comment in
  /// https://github.com/w3ctag/design-reviews-private-brainstorming. The second isn't wired up yet
  /// but will be another set of nullable fields here.
  discussionId Int?
  discussion   Discussion? @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  /// The text of the proposed comment.
  markdown String
}

/// Logins only support Github oauth login, since this bot is solely for mediating access to Github
/// data.
model GithubUser {
  /// The GraphQL node ID of this user.
  id       String @id
  /// Github login name, for display in the UI.
  username String

  // Tokens used for acting as this user. E.g. posting comments and updating labels.
  accessToken         String?
  refreshToken        String?
  /// When the accessToken needs to be refreshed.
  accessTokenExpires  DateTime?
  /// When the user will need to log in again from scratch.
  refreshTokenExpires DateTime?

  sessions Session[]

  issueComments IssueComment[]
}

/// One user can have multiple active sessions in different browsers.
model Session {
  /// Cryptographically random identifier for storage in a cookie.
  id     String     @id
  userId String
  user   GithubUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  expires DateTime
}
