---
import { IssueSearchDocument } from "../../gql/graphql";
import Layout from "../../layouts/Layout.astro";
import { pagedQuery } from "../../lib/github";
import { getLogin } from "../../lib/login";

const user = await getLogin(Astro.cookies);

const [agendaPRs, agendaIssues, pendingPRs, openReviews] = await Promise.all([
  pagedQuery(IssueSearchDocument, {
    query_: "org:w3ctag archived:false label:agenda+ is:open is:pr sort:updated",
  }),
  pagedQuery(IssueSearchDocument, {
    query_: "org:w3ctag archived:false label:agenda+ is:open is:issue sort:updated",
  }),
  pagedQuery(IssueSearchDocument, {
    query_: "org:w3ctag archived:false is:pr is:open -is:draft sort:updated",
  }),
  pagedQuery(IssueSearchDocument, {
    query_:
      "repo:w3ctag/design-reviews is:issue is:open sort:updated assignee:*" +
      ' -label:"Progress: blocked on dependency"' +
      ' -label:"Progress: pending editor update"' +
      ' -label:"Progress: pending external feedback"',
  }),
]);

const rateLimit = openReviews.rateLimit!;
rateLimit.cost =
  agendaIssues.rateLimit!.cost +
  pendingPRs.rateLimit!.cost +
  openReviews.rateLimit!.cost;
---

<script src="../../elements/agenda.ts"></script>
<Layout title="Generate the next agenda" {user}>
  <main>
    <tag-agenda
      agendaPRs={JSON.stringify(agendaPRs.search.nodes)}
      agendaIssues={JSON.stringify(agendaIssues.search.nodes)}
      pendingPRs={JSON.stringify(pendingPRs.search.nodes)}
      openReviews={JSON.stringify(openReviews.search.nodes)}></tag-agenda>
  </main>
  <footer style="float:right">
    Query cost: {rateLimit.cost}; remaining: {rateLimit.remaining}; limit resets
    at {rateLimit.resetAt}
  </footer>
</Layout>
