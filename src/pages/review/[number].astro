---
import { REVIEWS_REPO, TAG_ORG } from "astro:env/client";
import Markdown from "../../components/Markdown.astro";
import RelativeTime from "../../components/RelativeTime.astro";
import ReviewList from "../../components/ReviewList.astro";
import Layout from "../../layouts/Layout.astro";
import { app } from "../../lib/github/auth";
import { getLogin, getLoginUrl } from "../../lib/login";
import { prisma } from "../../lib/prisma";
import { githubIdIsTagMemberOnDate } from "../../lib/tag-members";

const { number } = Astro.params;

const user = await getLogin(Astro.cookies);
const userIsOnTag =
  user && githubIdIsTagMemberOnDate(user.githubId, new Date());

const parsedNumber = parseInt(number!);
if (isNaN(parsedNumber)) {
  return new Response(undefined, { status: 404 });
}

const review = await prisma.designReview.findUnique({
  where: { number: parsedNumber },
  include: {
    labels: true,
    milestone: true,
    comments: { include: { author: { select: { username: true } } } },
    discussions: {
      include: { meeting: true, proposedComments: true },
      orderBy: [{ meetingYear: "asc" }, { meetingName: "asc" }],
    },
  },
});

if (review == null) {
  return new Response(undefined, { status: 404 });
}

const sameWeek = await prisma.designReview.findMany({
  where: {
    milestoneId: review.milestoneId,
  },
  orderBy: { created: "desc" },
});

let hasTagPrivateComment = false;

const unifiedDiscussions = review.comments
  .filter(({ isPrivateBrainstorming }) => {
    if (isPrivateBrainstorming) {
      hasTagPrivateComment = true;
      return userIsOnTag;
    }
    return true;
  })
  .map(
    ({
      body,
      publishedAt,
      isMinimized,
      url,
      author,
      isPrivateBrainstorming,
    }) => ({
      type: "comment" as "comment" | "meeting",
      isPrivate: isPrivateBrainstorming,
      body,
      timestamp: publishedAt,
      url,
      isMinimized,
      author: author?.username,
    })
  )
  .concat(
    review.discussions.map(({ markdown, meeting }) => {
      const dateInName = meeting.name.match(
        /^(?<month>\d+)-(?:(?<day>\d+)-)?.*/
      );
      // TODO: Turn this into a Temporal of the right granularity.
      let timestamp: Date;
      if (dateInName && dateInName.groups) {
        if (dateInName.groups.day) {
          const { month, day } = dateInName.groups;
          timestamp = new Date(`${meeting.year}-${month}-${day}`);
        } else {
          timestamp = new Date(`${meeting.year}-${dateInName.groups.month}`);
        }
      } else {
        timestamp = new Date(meeting.year);
      }
      return {
        type: "meeting",
        isPrivate: false,
        body: markdown,
        timestamp,
        url: meeting.minutesUrl,
        isMinimized: false,
        author: undefined,
      };
    })
  )
  .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());
---

<Layout title={`Design Review #${review.number}`} {user}>
  <nav id="agenda">
    <ul>
      <ReviewList reviews={sameWeek} />
    </ul>
  </nav>
  <main>
    <h2>#{review.number}: {review.title}</h2>
    <p>
      <a
        href={`https://github.com/${TAG_ORG}/${REVIEWS_REPO}/issues/${review.number}`}
        >Visit on Github.</a
      >
    </p>
    <details open class="comment">
      <summary>Opened <RelativeTime datetime={review.created} /></summary>
      <Markdown source={review.body} />
    </details>

    <h3>Discussions</h3>
    {
      hasTagPrivateComment && !user && app ? (
        <p>
          <a href={getLoginUrl(Astro, app)}>Log in</a> to see TAG-private
          discussions.
        </p>
      ) : null
    }
    {
      unifiedDiscussions.map(
        ({ type, url, author, body, isMinimized, timestamp, isPrivate }) => (
          <details class="discussion" open={!isMinimized}>
            {type === "comment" ? (
              <>
                <summary>
                  {isPrivate ? "Private comment" : "Comment"}
                  {author ? `by @${author}` : null}
                  <RelativeTime datetime={timestamp} />
                  {/* prettier-ignore */}(<a href={url}>See Github</a>)
                </summary>
              </>
            ) : (
              <>
                <summary>
                  Discussed
                  <RelativeTime datetime={timestamp} />
                  {/* prettier-ignore */}(<a href={url}>See Github</a>)
                </summary>
              </>
            )}
            <Markdown source={body} />
          </details>
        )
      )
    }
  </main>
</Layout>

<style is:global>
  html {
    height: 100%;
  }
  body {
    height: 100%;
    margin: 0;
    display: grid;
    grid-template-areas:
      "top top"
      "agenda main";
    grid-template-columns: minmax(15em, 1fr) 3fr;
    grid-template-rows: max-content auto;
    gap: 1ex;
  }
  #top {
    grid-area: top;
  }
  #agenda {
    grid-area: agenda;
    height: 100%;
    overflow: auto;

    & ul {
      padding-inline-start: 1em;
    }
  }
  main {
    height: 100%;
    overflow: auto;
    grid-area: main;
    padding: 1ex;
  }
  .comment,
  .discussion {
    margin-top: 1em;
    border-radius: 1ex;
    padding: 1ex;
    summary {
      margin-top: -2.9ex;
      padding: 0.5ex;
      background-color: white;
      width: max-content;
    }
    &[open] {
      border: thin black solid;
    }
  }
</style>
