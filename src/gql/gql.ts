/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query BlobContents($ids: [ID!]!) {\n  nodes(ids: $ids) {\n    __typename\n    ... on Blob {\n      id\n      isTruncated\n      isBinary\n      text\n    }\n  }\n}": typeof types.BlobContentsDocument,
    "query FileContent($owner: String!, $repo: String!, $expression: String!) {\n  repository(owner: $owner, name: $repo) {\n    defaultBranchRef {\n      name\n    }\n    object(expression: $expression) {\n      __typename\n      ... on Blob {\n        id\n        isTruncated\n        isBinary\n        text\n      }\n    }\n  }\n}": typeof types.FileContentDocument,
    "query IssueBody($org: String!, $repo: String!, $number: Int!) {\n  repository(owner: $org, name: $repo) {\n    issue(number: $number) {\n      id\n      body\n    }\n  }\n}": typeof types.IssueBodyDocument,
    "query IssueComments($id: ID!, $cursor: String) {\n  node(id: $id) {\n    __typename\n    ... on Issue {\n      id\n      comments(\n        after: $cursor\n        first: 100\n        orderBy: {field: UPDATED_AT, direction: DESC}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          ...CommentDetails\n        }\n      }\n    }\n  }\n}\n\nfragment CommentDetails on IssueComment {\n  id\n  url\n  author {\n    login\n    ... on Node {\n      id\n    }\n  }\n  body\n  publishedAt\n  updatedAt\n  isMinimized\n}": typeof types.IssueCommentsDocument,
    "query IssueMetadata($ids: [ID!]!) {\n  nodes(ids: $ids) {\n    __typename\n    ... on Node {\n      id\n    }\n    ... on UniformResourceLocatable {\n      url\n    }\n    ... on RepositoryNode {\n      repository {\n        owner {\n          login\n        }\n        name\n      }\n    }\n    ... on Comment {\n      updatedAt\n      body\n    }\n    ... on Closable {\n      closedAt\n    }\n    ... on Issue {\n      title\n      number\n      milestone {\n        ...Milestone\n      }\n    }\n    ... on PullRequest {\n      title\n      number\n      author {\n        ... on Node {\n          id\n        }\n        login\n      }\n      milestone {\n        ...Milestone\n      }\n    }\n    ... on Assignable {\n      assignees(first: 50) {\n        nodes {\n          id\n          login\n        }\n      }\n    }\n    ... on Labelable {\n      labels(first: 50) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n\nfragment Milestone on Milestone {\n  id\n  title\n  dueOn\n}": typeof types.IssueMetadataDocument,
    "query RecentIssues($owner: String!, $repo: String!, $since: DateTime, $cursor: String) {\n  repository(owner: $owner, name: $repo) {\n    issues(\n      states: [OPEN, CLOSED]\n      first: 100\n      filterBy: {since: $since}\n      after: $cursor\n    ) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        number\n        title\n        body\n        createdAt\n        updatedAt\n        closedAt\n        assignees(first: 100) {\n          nodes {\n            id\n            login\n          }\n        }\n        labels(first: 100) {\n          totalCount\n          nodes {\n            id\n            name\n          }\n        }\n        milestone {\n          id\n          title\n          dueOn\n        }\n        comments(first: 20, orderBy: {field: UPDATED_AT, direction: DESC}) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            ...CommentDetails\n          }\n        }\n      }\n    }\n  }\n}": typeof types.RecentIssuesDocument,
    "query IssueSearch($query_: String!, $cursor: String) {\n  search(type: ISSUE, query: $query_, first: 100, after: $cursor) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      __typename\n      ... on Node {\n        id\n      }\n      ... on UniformResourceLocatable {\n        url\n      }\n      ... on RepositoryNode {\n        repository {\n          owner {\n            login\n          }\n          name\n        }\n      }\n      ... on Issue {\n        title\n        number\n      }\n      ... on PullRequest {\n        title\n        number\n        author {\n          login\n        }\n      }\n      ... on Assignable {\n        assignees(first: 10) {\n          nodes {\n            login\n          }\n        }\n      }\n      ... on Labelable {\n        labels(first: 50) {\n          nodes {\n            name\n          }\n        }\n      }\n    }\n  }\n  rateLimit {\n    cost\n    remaining\n    resetAt\n  }\n}": typeof types.IssueSearchDocument,
    "query ListMinutesInYear($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on Tree {\n      entries {\n        name\n        object {\n          __typename\n          ... on Tree {\n            entries {\n              name\n              path\n              object {\n                __typename\n                ... on Blob {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": typeof types.ListMinutesInYearDocument,
    "query ListMinutesYears($owner: String!, $repo: String!) {\n  repository(owner: $owner, name: $repo) {\n    defaultBranchRef {\n      name\n    }\n    object(expression: \"HEAD:\") {\n      __typename\n      ... on Tree {\n        entries {\n          name\n          object {\n            __typename\n            id\n          }\n        }\n      }\n    }\n  }\n}": typeof types.ListMinutesYearsDocument,
    "mutation removeLabels($labelableId: ID!, $labelIds: [ID!]!) {\n  removeLabelsFromLabelable(\n    input: {labelableId: $labelableId, labelIds: $labelIds}\n  ) {\n    labelable {\n      __typename\n      labels {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\n}": typeof types.RemoveLabelsDocument,
    "mutation updateIssueBody($id: ID!, $body: String!) {\n  updateIssue(input: {id: $id, body: $body}) {\n    issue {\n      id\n    }\n  }\n}": typeof types.UpdateIssueBodyDocument,
};
const documents: Documents = {
    "query BlobContents($ids: [ID!]!) {\n  nodes(ids: $ids) {\n    __typename\n    ... on Blob {\n      id\n      isTruncated\n      isBinary\n      text\n    }\n  }\n}": types.BlobContentsDocument,
    "query FileContent($owner: String!, $repo: String!, $expression: String!) {\n  repository(owner: $owner, name: $repo) {\n    defaultBranchRef {\n      name\n    }\n    object(expression: $expression) {\n      __typename\n      ... on Blob {\n        id\n        isTruncated\n        isBinary\n        text\n      }\n    }\n  }\n}": types.FileContentDocument,
    "query IssueBody($org: String!, $repo: String!, $number: Int!) {\n  repository(owner: $org, name: $repo) {\n    issue(number: $number) {\n      id\n      body\n    }\n  }\n}": types.IssueBodyDocument,
    "query IssueComments($id: ID!, $cursor: String) {\n  node(id: $id) {\n    __typename\n    ... on Issue {\n      id\n      comments(\n        after: $cursor\n        first: 100\n        orderBy: {field: UPDATED_AT, direction: DESC}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          ...CommentDetails\n        }\n      }\n    }\n  }\n}\n\nfragment CommentDetails on IssueComment {\n  id\n  url\n  author {\n    login\n    ... on Node {\n      id\n    }\n  }\n  body\n  publishedAt\n  updatedAt\n  isMinimized\n}": types.IssueCommentsDocument,
    "query IssueMetadata($ids: [ID!]!) {\n  nodes(ids: $ids) {\n    __typename\n    ... on Node {\n      id\n    }\n    ... on UniformResourceLocatable {\n      url\n    }\n    ... on RepositoryNode {\n      repository {\n        owner {\n          login\n        }\n        name\n      }\n    }\n    ... on Comment {\n      updatedAt\n      body\n    }\n    ... on Closable {\n      closedAt\n    }\n    ... on Issue {\n      title\n      number\n      milestone {\n        ...Milestone\n      }\n    }\n    ... on PullRequest {\n      title\n      number\n      author {\n        ... on Node {\n          id\n        }\n        login\n      }\n      milestone {\n        ...Milestone\n      }\n    }\n    ... on Assignable {\n      assignees(first: 50) {\n        nodes {\n          id\n          login\n        }\n      }\n    }\n    ... on Labelable {\n      labels(first: 50) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n\nfragment Milestone on Milestone {\n  id\n  title\n  dueOn\n}": types.IssueMetadataDocument,
    "query RecentIssues($owner: String!, $repo: String!, $since: DateTime, $cursor: String) {\n  repository(owner: $owner, name: $repo) {\n    issues(\n      states: [OPEN, CLOSED]\n      first: 100\n      filterBy: {since: $since}\n      after: $cursor\n    ) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        number\n        title\n        body\n        createdAt\n        updatedAt\n        closedAt\n        assignees(first: 100) {\n          nodes {\n            id\n            login\n          }\n        }\n        labels(first: 100) {\n          totalCount\n          nodes {\n            id\n            name\n          }\n        }\n        milestone {\n          id\n          title\n          dueOn\n        }\n        comments(first: 20, orderBy: {field: UPDATED_AT, direction: DESC}) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            ...CommentDetails\n          }\n        }\n      }\n    }\n  }\n}": types.RecentIssuesDocument,
    "query IssueSearch($query_: String!, $cursor: String) {\n  search(type: ISSUE, query: $query_, first: 100, after: $cursor) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      __typename\n      ... on Node {\n        id\n      }\n      ... on UniformResourceLocatable {\n        url\n      }\n      ... on RepositoryNode {\n        repository {\n          owner {\n            login\n          }\n          name\n        }\n      }\n      ... on Issue {\n        title\n        number\n      }\n      ... on PullRequest {\n        title\n        number\n        author {\n          login\n        }\n      }\n      ... on Assignable {\n        assignees(first: 10) {\n          nodes {\n            login\n          }\n        }\n      }\n      ... on Labelable {\n        labels(first: 50) {\n          nodes {\n            name\n          }\n        }\n      }\n    }\n  }\n  rateLimit {\n    cost\n    remaining\n    resetAt\n  }\n}": types.IssueSearchDocument,
    "query ListMinutesInYear($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on Tree {\n      entries {\n        name\n        object {\n          __typename\n          ... on Tree {\n            entries {\n              name\n              path\n              object {\n                __typename\n                ... on Blob {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}": types.ListMinutesInYearDocument,
    "query ListMinutesYears($owner: String!, $repo: String!) {\n  repository(owner: $owner, name: $repo) {\n    defaultBranchRef {\n      name\n    }\n    object(expression: \"HEAD:\") {\n      __typename\n      ... on Tree {\n        entries {\n          name\n          object {\n            __typename\n            id\n          }\n        }\n      }\n    }\n  }\n}": types.ListMinutesYearsDocument,
    "mutation removeLabels($labelableId: ID!, $labelIds: [ID!]!) {\n  removeLabelsFromLabelable(\n    input: {labelableId: $labelableId, labelIds: $labelIds}\n  ) {\n    labelable {\n      __typename\n      labels {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\n}": types.RemoveLabelsDocument,
    "mutation updateIssueBody($id: ID!, $body: String!) {\n  updateIssue(input: {id: $id, body: $body}) {\n    issue {\n      id\n    }\n  }\n}": types.UpdateIssueBodyDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query BlobContents($ids: [ID!]!) {\n  nodes(ids: $ids) {\n    __typename\n    ... on Blob {\n      id\n      isTruncated\n      isBinary\n      text\n    }\n  }\n}"): typeof import('./graphql').BlobContentsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query FileContent($owner: String!, $repo: String!, $expression: String!) {\n  repository(owner: $owner, name: $repo) {\n    defaultBranchRef {\n      name\n    }\n    object(expression: $expression) {\n      __typename\n      ... on Blob {\n        id\n        isTruncated\n        isBinary\n        text\n      }\n    }\n  }\n}"): typeof import('./graphql').FileContentDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query IssueBody($org: String!, $repo: String!, $number: Int!) {\n  repository(owner: $org, name: $repo) {\n    issue(number: $number) {\n      id\n      body\n    }\n  }\n}"): typeof import('./graphql').IssueBodyDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query IssueComments($id: ID!, $cursor: String) {\n  node(id: $id) {\n    __typename\n    ... on Issue {\n      id\n      comments(\n        after: $cursor\n        first: 100\n        orderBy: {field: UPDATED_AT, direction: DESC}\n      ) {\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        nodes {\n          ...CommentDetails\n        }\n      }\n    }\n  }\n}\n\nfragment CommentDetails on IssueComment {\n  id\n  url\n  author {\n    login\n    ... on Node {\n      id\n    }\n  }\n  body\n  publishedAt\n  updatedAt\n  isMinimized\n}"): typeof import('./graphql').IssueCommentsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query IssueMetadata($ids: [ID!]!) {\n  nodes(ids: $ids) {\n    __typename\n    ... on Node {\n      id\n    }\n    ... on UniformResourceLocatable {\n      url\n    }\n    ... on RepositoryNode {\n      repository {\n        owner {\n          login\n        }\n        name\n      }\n    }\n    ... on Comment {\n      updatedAt\n      body\n    }\n    ... on Closable {\n      closedAt\n    }\n    ... on Issue {\n      title\n      number\n      milestone {\n        ...Milestone\n      }\n    }\n    ... on PullRequest {\n      title\n      number\n      author {\n        ... on Node {\n          id\n        }\n        login\n      }\n      milestone {\n        ...Milestone\n      }\n    }\n    ... on Assignable {\n      assignees(first: 50) {\n        nodes {\n          id\n          login\n        }\n      }\n    }\n    ... on Labelable {\n      labels(first: 50) {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n\nfragment Milestone on Milestone {\n  id\n  title\n  dueOn\n}"): typeof import('./graphql').IssueMetadataDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query RecentIssues($owner: String!, $repo: String!, $since: DateTime, $cursor: String) {\n  repository(owner: $owner, name: $repo) {\n    issues(\n      states: [OPEN, CLOSED]\n      first: 100\n      filterBy: {since: $since}\n      after: $cursor\n    ) {\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      nodes {\n        id\n        number\n        title\n        body\n        createdAt\n        updatedAt\n        closedAt\n        assignees(first: 100) {\n          nodes {\n            id\n            login\n          }\n        }\n        labels(first: 100) {\n          totalCount\n          nodes {\n            id\n            name\n          }\n        }\n        milestone {\n          id\n          title\n          dueOn\n        }\n        comments(first: 20, orderBy: {field: UPDATED_AT, direction: DESC}) {\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n          nodes {\n            ...CommentDetails\n          }\n        }\n      }\n    }\n  }\n}"): typeof import('./graphql').RecentIssuesDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query IssueSearch($query_: String!, $cursor: String) {\n  search(type: ISSUE, query: $query_, first: 100, after: $cursor) {\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    nodes {\n      __typename\n      ... on Node {\n        id\n      }\n      ... on UniformResourceLocatable {\n        url\n      }\n      ... on RepositoryNode {\n        repository {\n          owner {\n            login\n          }\n          name\n        }\n      }\n      ... on Issue {\n        title\n        number\n      }\n      ... on PullRequest {\n        title\n        number\n        author {\n          login\n        }\n      }\n      ... on Assignable {\n        assignees(first: 10) {\n          nodes {\n            login\n          }\n        }\n      }\n      ... on Labelable {\n        labels(first: 50) {\n          nodes {\n            name\n          }\n        }\n      }\n    }\n  }\n  rateLimit {\n    cost\n    remaining\n    resetAt\n  }\n}"): typeof import('./graphql').IssueSearchDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListMinutesInYear($id: ID!) {\n  node(id: $id) {\n    __typename\n    ... on Tree {\n      entries {\n        name\n        object {\n          __typename\n          ... on Tree {\n            entries {\n              name\n              path\n              object {\n                __typename\n                ... on Blob {\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"): typeof import('./graphql').ListMinutesInYearDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListMinutesYears($owner: String!, $repo: String!) {\n  repository(owner: $owner, name: $repo) {\n    defaultBranchRef {\n      name\n    }\n    object(expression: \"HEAD:\") {\n      __typename\n      ... on Tree {\n        entries {\n          name\n          object {\n            __typename\n            id\n          }\n        }\n      }\n    }\n  }\n}"): typeof import('./graphql').ListMinutesYearsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation removeLabels($labelableId: ID!, $labelIds: [ID!]!) {\n  removeLabelsFromLabelable(\n    input: {labelableId: $labelableId, labelIds: $labelIds}\n  ) {\n    labelable {\n      __typename\n      labels {\n        nodes {\n          id\n          name\n        }\n      }\n    }\n  }\n}"): typeof import('./graphql').RemoveLabelsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation updateIssueBody($id: ID!, $body: String!) {\n  updateIssue(input: {id: $id, body: $body}) {\n    issue {\n      id\n    }\n  }\n}"): typeof import('./graphql').UpdateIssueBodyDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
